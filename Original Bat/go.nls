to go

  ; if all of the tags are collected, stop the model
  ifelse numTags = 0
  [
    set finished? true
    ask turtles 
    [
      if returned?
      [
        set shape "robot"
        return-to-base
      ]
      ifelse pen-down?
      [ pen-down ]
      [ pen-up ]
    ]
    
    if robotsHome = 0
    [
      clear-drawing
      stop
    ]
  ]
  [
    ask turtles
    [
      ifelse pen-down?
      [ pen-down ]
      [ pen-up ]
      
      if searching?
      [ search ]
      
      if returning?
      [ return-to-base ]
      
      if recruiting?
      [ call-friends ]
      
      if recruited?
      [ go-to-friend ]
    ]
  ]

  tick

end

;;;;;;;;;;;;;;;;;;
;;CHECK FOR TAGS;;
;;;;;;;;;;;;;;;;;;

to check-for-tags

    if count neighbors in-radius 2 with [ pcolor = blue ] > 0
    [
      if searching?
      [
        ask one-of neighbors in-radius 2 with [ pcolor = blue ]
        [ set pcolor base-pcolor ]
        set shape "robot with rock"
        set searching? false
        let isRecruiting? false
        let isReturning? false
        ask patches in-radius 1
        [
          ifelse pcolor = blue
          [ set isRecruiting? true ]
          [ set isReturning? true ]
        ]
        set recruiting? isRecruiting?
        set returning? isReturning? 
        if recruiting? 
        [
          set worth 500
          set reached? false
          set targetX pxcor
          set targetY pycor
        ] 
      ]
    ]

end

;;;;;;;;;;
;;SEARCH;;
;;;;;;;;;;

to search

  ifelse (pxcor = min-pxcor) or (pxcor = max-pxcor) or 
         (pycor = min-pycor) or (pycor = max-pycor)
  [
    face-origin
    forward travel-distance 
  ]
  [
    check-for-tags
    forward travel-distance
    ifelse reached? 
    [
      ifelse worth > 0
      [
        ifelse distancexy targetX targetY > 30
        [
          faceXY targetX targetY
        ]
        [
          turning
        ]
        set worth (worth - 1)
      ]
      [
        set reached? false
        set worth 0
      ]
    ]
    [
      ifelse worth > 0
      [
        ifelse targetX = pxcor and targetY = pycor
        [ set reached? true ]
        [ facexy targetX targetY ]
      ]
      [
        turning
      ]
    ]
  ]

end

;;;;;;;;;;;;;;;;;;
;;RETURN TO BASE;;
;;;;;;;;;;;;;;;;;;

to return-to-base
  
  ifelse count neighbors in-radius 2 with [ pcolor = green ] > 0 and
         distancexy 0 0 < 1.5
  [
    ifelse finished? and returned?
    [ 
      set returned? false
      set robotsHome (robotsHome - 1)
    ]
    [
      set numTags (numTags - 1)
      set shape "robot"
      set returning? false
      set searching? true
      if worth > 0
      [ set reached? false ]
    ]
  ]
  [
    face-origin
    forward travel-distance
  ]

end

;;;;;;;;;;;;;;;;
;;CALL FRIENDS;;
;;;;;;;;;;;;;;;;

to call-friends
  let rockX pxcor
  let rockY pycor
  
  ask turtles in-radius 5000
  [
    if searching?
    [
      set searching? false
      set recruited? true
      set reached? false
      
      set targetX rockX
      set targetY rockY
    ]
  ]
  set recruiting? false
  set returning? true
end

;;;;;;;;;;;;;;;;
;;GO TO FRIEND;;
;;;;;;;;;;;;;;;;

to go-to-friend
  set label "recruited"
  ifelse targetX = pxcor and targetY = pycor
  [
    set searching? true
    set recruited? false
    set reached? true
    set label ""
  ]
  [ 
    set worth 300
    facexy targetX targetY 
    forward travel-distance
  ]
end

to confine [tickNum]
  let x tickNum / 180
  let y 10000 / 180
  if tickNum != 50000
  [ set y (tickNum - 10000) / 180 ]
  ifelse distancexy 0 0 > x
  [ facexy 0 0 ]
  [ 
    ifelse distancexy 0 0 < y
    [ 
      ifelse pxcor != 0 and pycor != 0
      [ 
        ifelse heading > 180
        [ left heading - 180 ]
        [ right 180 - heading ]
      ]
      [ turning]
    ]
    [ turning ]
  ]
end

to turning
  left random turn-angle
  right random turn-angle
end

to face-origin
  facexy 0 0 
end